#!/usr/local/bin/php
<?php
(PHP_SAPI === 'cli') or die("Please run this script using the cli sapi");

require __DIR__ . "/../include/version.inc";
require __DIR__ . "/../include/releases.inc";

if ($_SERVER['argc'] < 1) {
	fwrite(STDERR, "Usage: {$_SERVER['argv'][0]} major_version [ minor_version ]\n");
	exit(1);
}

$major = intval($_SERVER['argv'][1]);
isset($RELEASES[$major]) or die("Unkown major version $major");

if (isset($_SERVER['argv'][2])) {
	$minor = intval($_SERVER['argv'][2]);
	$version_prefix = "{$major}.{$minor}.";
	foreach ($RELEASES[$major] as $version => $info) {
		if (strncmp($version, $version_prefix, strlen($version_prefix)) == 0) {
			// Bleed $version and $info into outer scope.
			break;
		}
	}
	if (strncmp($version, $version_prefix, strlen($version_prefix))) {
		fwrite(STDERR, "Unknown minor version $major.$minor\n");
		exit(1);
	}
} else {
	// Calling without a minor will just grab the most recent minor.
	$version = key($RELEASES[$major]);
	$info = current($RELEASES[$major]);
}

if (!isset($info['date'])) {
	// Derive date from source dates.
	$info['date'] = null;
	foreach ($info['source'] as $source) {
		if ($info['date'] === null) {
			$info['date'] = $source['date'];
			continue;
		}
		if ($info['date'] !== $source['date']) {
			fwrite(STDERR, "Release has multiple differing dates in sources list. Unable to pick one.\n");
			exit(1);
		}
	}
	if ($info['date'] === null) {
		fwrite(STDERR, "Unable to determine release date.\n");
		exit(1);
	}
}

$info["museum"] = false;
if (is_bool($info["announcement"]) && $info["announcement"]) {
	$info["announcement"] = array("English" => "/releases/" . str_replace(".", "_", $version) . ".php");
}

$OLDRELEASES[$major] = array_merge(
	array($version => $info),
	$OLDRELEASES[$major]
);

file_put_contents(__DIR__ . "/../include/releases.inc", [
	"<?php\n\$OLDRELEASES = ",
	var_export($OLDRELEASES, true),
	";\n",
]);

echo "This was fun \o/\nI hope you remembered to run this script *before* updating include/version.inc... :)\n";
